#!/usr/bin/env node

const fs = require('fs')
const dataUri = require('strong-data-uri')
const mime = require('mime')
const commander = require('commander')

// decode: data-colon data:foo
// encode: data-colon filename
// decode: data-colon < filename-starting-with-data:
// encode: data-colon < filename

const pkg = require('../package')
const program = new commander.Command()

program
  .version(pkg.version)
  .option('-o, --output <file>', 'Output file name [stdout]')
  .option('-m, --mediatype <type>', 'MIME media type for encoding')
  .arguments('[fileOrURI...]')
  .parse(process.argv)

const DATA = 'data:'
const DATA_REGEX = /^data:/
const DATA_BUF = Buffer.from(DATA)

const OUTPUT = program.output
  ? fs.createWriteStream(program.output) : process.stdout

let MEDIA = program.mediatype

function readStdin (cb) {
  const input = []
  process.stdin.on('data', buf => input.push(buf))
  process.stdin.on('end', () => cb(null, Buffer.concat(input)))
  process.stdin.on('error', cb)

  process.stdin.resume()
}

function encode (err, buf) {
  if (err != null) {
    console.error('Error processing input: ' + err)
    return
  }
  OUTPUT.write(dataUri.encode(buf, MEDIA))
  OUTPUT.write('\n')
}

function decode (err, buf) {
  if (err != null) {
    console.error('Error processing input: ' + err)
    return
  }
  let dat = Buffer.isBuffer(buf) ? buf.toString('utf8') : buf
  dat = dat.trim()
  OUTPUT.write(dataUri.decode(dat))
}

function detect (err, buf) {
  if (err !== null) {
    console.error('Error processing input: ' + err)
    return
  }
  let f = decode
  if (buf.length < 5) {
    f = encode
  }
  if (Buffer.isBuffer(buf)) {
    if (!DATA_BUF.equals(buf.slice(0, DATA_BUF.length))) {
      f = encode
    }
  } else if (!buf.match(DATA_REGEX)) {
    f = encode
  }
  f(err, buf)
}

if (program.args.length === 0) {
  readStdin(detect)
} else {
  program.args.forEach(function (arg) {
    if (arg.match(DATA_REGEX)) {
      decode(null, arg)
    } else {
      if (arg === '-') {
        readStdin(detect)
      } else {
        if (!MEDIA) {
          MEDIA = mime.getType(arg)
        }
        fs.readFile(arg, encode)
      }
    }
  })
}
